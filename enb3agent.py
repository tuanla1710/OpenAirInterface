#!/usr/bin/python
# -*- coding: utf-8 -*-
# Lionel GAUTHIER
# This script is a downgrade of a python script written for the openair stack, generating sequence diagrams charts, displaying
# messages exchanged between LTE access stratum protocol entities.
# This script needs mscgen tool (http://www.mcternan.me.uk/mscgen/).
#  
# The aim of this script is to collect some traces from oaisim stack and generate a mscgen script, then generate a sequence diagram 
# image (png or jpeg) based on the scripts generated.
# An example of how it can be invoqued: msc_gen.py /tmp/msc_log.txt /tmp/msc_log2.txt  msc_logx.txt are input text files,
# They/It are/is generated by the execution of executables in linux user space. May be it is better to operate on log files 'grepped' with MSC:
#  ./my_exe.exe | grep \[MSC > /tmp/msc_log1.txt 


# Now, examples of how to generate a mscgen trace in a C executable:
#  -First you have to declare the instance(s) of the protocol(s) that will send or receive messages.
#    This is done with the following line:
#       [MSC_NEW][system time][protocol_name=instance_name] 
#       examples:
#           printf("[MSC_NEW][%s][MIH-F=%s]\n", getTimeStamp4Log(), g_mihf_id); for declaring a new instance of a protocol entity of type MIH-F
#                                                                           with an instance name g_mihf_id (of type char*)
#           printf("[MSC_NEW][%s][NAS=%s]\n", getTimeStamp4Log(), "nas");  other example.
#    This declaration of instances of protocols is mandatory to for this script to work.
#
#  -Then for tracing a message you have to log a line following this format:
#       [MSC_MSG][system time][source instance_name][--- message_name --->][destination instance_name]
#       Note:
#          ---> means a message that has been received correctly by destination
#          ---x means a message lost by destination
#       example
#       NOTICE("[MSC_MSG][%s][%s][--- Link_Register.indication\\n%s ---x][%s]\n",getTimeStamp4Log(),g_link_id,g_msc_gen_buf,g_mihf_id);
#


# TCP Server Code
from socket import *  # Imports socket module
import numpy as np
host = "192.168.100.101"  # Set the server address to variable host
port = 4446  # Sets the variable port to 4446

# Date to send: 12132
s = socket(AF_INET, SOCK_STREAM)
# s.setblocking(0)
s.bind((host, port))  # Binds the socket. Note that the input to
i = 0
while i == 0:
    addr_hist = ["ad_old", "ad_new"]
    
    # the bind function is a tuple
    j = 0
    condition = str(00000)
    i1 = 0
    i2 = 0
    i3 = 0
    i4 = 0
    i5 = 0
    i6 = 0
    nUE = 2
    while i1 == 0:
        # Sets socket to listening state with a queue
        print ("Listening from UEs...")
        s.listen(5)
        # listen from one of 10 connections, do:
        q, addr = s.accept()  # Accepts incoming request from client and returns
        addr_hist[0] = addr_hist[1]
        addr_hist[1] = addr
        print 'addr= ', addr
        # if addr_hist[1] != addr_hist[0]:
        # Update to table
        print 'open and get data'
        filename = '/home/enb/empower-enb-agent/agenenbue/ua_info.dat'
        f = open(filename, 'rb')
        ua_info_data = f.read(409600)
        # data = "Send UA info to UEs and request to send data to eNB: " + ua_info_data
        print "data=", ua_info_data
        q.send(ua_info_data)  # Sends data to client
        print "sent data"
        msg = q.recv(409600)
        if not msg:
            break
        print "received data"
        # print("Message from UE: " + msg[0:19])
        # Data of IMEI from HSS. This IMEI can be received from HSS at the eNB.
        # print "msg[0:2]", msg[0:3]
        if msg[1] == "1":
            # UE_inf[0] = msg
            print 'open and write data'
            filename = '/home/enb/empower-enb-agent/agenenbue/ue1_info.dat'
            f1 = open(filename, 'wb')
            l = f1.write(msg)
            f1.close()
            print msg
            i2 = 1
        if msg[1] == "2":
            # UE_inf[1] = msg
            print 'open and write data'
            filename = '/home/enb/empower-enb-agent/agenenbue/ue2_info.dat'
            f2 = open(filename, 'wb')
            l = f2.write(msg)
            f2.close()
            print msg
            i3 = 1
            #print msg
        if msg[0] == "3":
            # UE_inf[2] = msg
            print 'open and write data'
            filename = '/home/enb/empower-enb-agent/agenenbue/ue3_info.dat'
            f3 = open(filename, 'wb')
            l = f3.write(msg)
            f3.close()
            print msg
            i4 = 1
            #print msg
        if msg[0] == "4":
            # UE_inf[3] = msg
            print 'open and write data'
            filename = '/home/enb/empower-enb-agent/agenenbue/ue4_info.dat'
            f4 = open(filename, 'wb')
            l = f4.write(msg)
            f4.close()
            print msg
            i5 = 1
        if msg[0] == "5":
            # UE_inf[4] = msg
            print 'open and write data'
            filename = '/home/enb/empower-enb-agent/agenenbue/ue5_info.dat'
            f5 = open(filename, 'wb')
            l = f5.write(msg)
            f5.close()
            print msg
            i6 = 1
            print 'i2+i3+i4+i5+i6 =', i2+i3+i4+i5+i6
        if i2+i3+i4+i5+i6 == 1:
            i1 = 1
    f.close()


